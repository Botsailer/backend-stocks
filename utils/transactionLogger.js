const fs = require('fs').promises;
const path = require('path');

class TransactionLogger {
  constructor() {
    this.logDir = path.join(__dirname, '../');
    this.logFilePath = path.join(this.logDir, 'transaction-logs.txt');
  }

  async ensureLogFile() {
    try {
      await fs.access(this.logFilePath);
    } catch (error) {
      // File doesn't exist, create it
      await fs.writeFile(this.logFilePath, '=== PORTFOLIO TRANSACTION LOGS ===\n\n');
    }
  }

  formatCurrency(amount) {
    return `‚Çπ${parseFloat(amount).toFixed(2)}`;
  }

  formatPercentage(value) {
    return `${parseFloat(value).toFixed(2)}%`;
  }

  getCurrentTimestamp() {
    return new Date().toLocaleString('en-IN', {
      timeZone: 'Asia/Kolkata',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  async logBuyTransaction(data) {
    await this.ensureLogFile();
    
    const {
      portfolioId,
      portfolioName,
      stockSymbol,
      action, // 'Fresh-Buy' or 'addon-buy'
      beforeState,
      stockData,
      transactionData,
      afterState,
      portfolioBefore,
      portfolioAfter,
      userEmail
    } = data;

    const logEntry = `
${'='.repeat(80)}
üîµ BUY TRANSACTION - ${action.toUpperCase()}
${'='.repeat(80)}
üìÖ Timestamp: ${this.getCurrentTimestamp()}
üë§ User: ${userEmail}
üìä Portfolio: ${portfolioName} (ID: ${portfolioId})
üè∑Ô∏è  Stock Symbol: ${stockSymbol}

üìà STOCK MARKET DATA (from StockSymbol Collection):
   ‚Ä¢ Current Market Price: ${this.formatCurrency(stockData.currentPrice)}
   ‚Ä¢ Today Opening Price: ${this.formatCurrency(stockData.todayOpeningPrice || 'N/A')}
   ‚Ä¢ Today Closing Price: ${this.formatCurrency(stockData.todayClosingPrice || 'N/A')}
   ‚Ä¢ Previous Close: ${this.formatCurrency(stockData.previousClose || 'N/A')}
   ‚Ä¢ 52 Week High: ${this.formatCurrency(stockData.weekHigh52 || 'N/A')}
   ‚Ä¢ 52 Week Low: ${this.formatCurrency(stockData.weekLow52 || 'N/A')}
   ‚Ä¢ Market Cap: ${stockData.marketCap || 'N/A'}
   ‚Ä¢ Sector: ${stockData.sector || 'N/A'}

üîÑ TRANSACTION DETAILS:
   ‚Ä¢ Action Type: ${action}
   ‚Ä¢ Buy Price: ${this.formatCurrency(transactionData.buyPrice)}
   ‚Ä¢ Quantity Purchased: ${transactionData.quantity}
   ‚Ä¢ Total Investment: ${this.formatCurrency(transactionData.totalInvestment)}
   ‚Ä¢ Transaction Fee: ${this.formatCurrency(transactionData.transactionFee || 0)}
   ‚Ä¢ Net Amount Deducted: ${this.formatCurrency(transactionData.netAmount)}

üìã BEFORE TRANSACTION STATE:
   Portfolio Level:
   ‚Ä¢ Total Value: ${this.formatCurrency(portfolioBefore.totalValue)}
   ‚Ä¢ Cash Balance: ${this.formatCurrency(portfolioBefore.cashBalance)}
   ‚Ä¢ Total Investment: ${this.formatCurrency(portfolioBefore.totalInvestment)}
   ‚Ä¢ Minimum Investment: ${this.formatCurrency(portfolioBefore.minInvestment)}
   ‚Ä¢ Holdings Count: ${portfolioBefore.holdingsCount}
   
   Stock Level (${stockSymbol}):
   ${beforeState.exists ? `
   ‚Ä¢ Existing Position: YES
   ‚Ä¢ Previous Quantity: ${beforeState.quantity}
   ‚Ä¢ Previous Buy Price: ${this.formatCurrency(beforeState.buyPrice)}
   ‚Ä¢ Previous Investment Value: ${this.formatCurrency(beforeState.investmentValue)}
   ‚Ä¢ Previous Weight: ${this.formatPercentage(beforeState.weight)}
   ‚Ä¢ Previous Unrealized P&L: ${this.formatCurrency(beforeState.unrealizedPnL)}` : `
   ‚Ä¢ Existing Position: NO - This is a fresh purchase`}

üîÑ CALCULATION PROCESS:
   Step 1 - Price Validation:
   ‚Ä¢ Market Price: ${this.formatCurrency(stockData.currentPrice)}
   ‚Ä¢ Buy Price Used: ${this.formatCurrency(transactionData.buyPrice)}
   ‚Ä¢ Price Difference: ${this.formatCurrency(transactionData.buyPrice - stockData.currentPrice)} (${transactionData.buyPrice > stockData.currentPrice ? 'Premium' : 'Discount'})
   
   Step 2 - Investment Calculation:
   ‚Ä¢ Quantity √ó Buy Price = ${transactionData.quantity} √ó ${this.formatCurrency(transactionData.buyPrice)} = ${this.formatCurrency(transactionData.totalInvestment)}
   
   ${beforeState.exists ? `
   Step 3 - Weighted Average Calculation (for addon-buy):
   ‚Ä¢ Previous Total Investment: ${this.formatCurrency(beforeState.totalInvestment)}
   ‚Ä¢ New Investment: ${this.formatCurrency(transactionData.totalInvestment)}
   ‚Ä¢ Combined Investment: ${this.formatCurrency(beforeState.totalInvestment + transactionData.totalInvestment)}
   ‚Ä¢ Previous Total Quantity: ${beforeState.quantity}
   ‚Ä¢ New Quantity: ${transactionData.quantity}
   ‚Ä¢ Combined Quantity: ${beforeState.quantity + transactionData.quantity}
   ‚Ä¢ New Weighted Avg Price: ${this.formatCurrency((beforeState.totalInvestment + transactionData.totalInvestment) / (beforeState.quantity + transactionData.quantity))}` : ''}
   
   Step 4 - Cash Balance Update:
   ‚Ä¢ Previous Cash: ${this.formatCurrency(portfolioBefore.cashBalance)}
   ‚Ä¢ Amount Deducted: ${this.formatCurrency(transactionData.netAmount)}
   ‚Ä¢ New Cash Balance: ${this.formatCurrency(portfolioBefore.cashBalance - transactionData.netAmount)}

‚úÖ AFTER TRANSACTION STATE:
   Portfolio Level:
   ‚Ä¢ Total Value: ${this.formatCurrency(portfolioAfter.totalValue)}
   ‚Ä¢ Cash Balance: ${this.formatCurrency(portfolioAfter.cashBalance)}
   ‚Ä¢ Total Investment: ${this.formatCurrency(portfolioAfter.totalInvestment)}
   ‚Ä¢ Holdings Count: ${portfolioAfter.holdingsCount}
   ‚Ä¢ Value Change: ${this.formatCurrency(portfolioAfter.totalValue - portfolioBefore.totalValue)}
   
   Stock Level (${stockSymbol}):
   ‚Ä¢ Final Quantity: ${afterState.quantity}
   ‚Ä¢ Final Buy Price (Weighted Avg): ${this.formatCurrency(afterState.buyPrice)}
   ‚Ä¢ Total Investment Value: ${this.formatCurrency(afterState.investmentValueAtBuy)}
   ‚Ä¢ Current Market Value: ${this.formatCurrency(afterState.investmentValueAtMarket)}
   ‚Ä¢ Current Weight: ${this.formatPercentage(afterState.weight)}
   ‚Ä¢ Unrealized P&L: ${this.formatCurrency(afterState.unrealizedPnL)} (${this.formatPercentage(afterState.unrealizedPnLPercent)})
   ‚Ä¢ Status: ${afterState.status}

üí∞ FINANCIAL SUMMARY:
   ‚Ä¢ Amount Invested: ${this.formatCurrency(transactionData.totalInvestment)}
   ‚Ä¢ Cash Remaining: ${this.formatCurrency(portfolioAfter.cashBalance)}
   ‚Ä¢ Portfolio Growth: ${this.formatCurrency(portfolioAfter.totalValue - portfolioBefore.totalValue)}
   ‚Ä¢ Transaction Impact: ${portfolioAfter.totalValue > portfolioBefore.totalValue ? '‚úÖ Positive' : '‚ö†Ô∏è Negative'}

${'='.repeat(80)}

`;

    try {
      await fs.appendFile(this.logFilePath, logEntry);
    } catch (error) {
      console.error('Failed to write buy transaction log:', error);
    }
  }

  async logSellTransaction(data) {
    await this.ensureLogFile();
    
    const {
      portfolioId,
      portfolioName,
      stockSymbol,
      action, // 'partial-sell' or 'Sell'
      beforeState,
      stockData,
      transactionData,
      afterState,
      portfolioBefore,
      portfolioAfter,
      userEmail,
      sellCalculation
    } = data;

    const logEntry = `
${'='.repeat(80)}
üî¥ SELL TRANSACTION - ${action.toUpperCase()}
${'='.repeat(80)}
üìÖ Timestamp: ${this.getCurrentTimestamp()}
üë§ User: ${userEmail}
üìä Portfolio: ${portfolioName} (ID: ${portfolioId})
üè∑Ô∏è  Stock Symbol: ${stockSymbol}

üìà STOCK MARKET DATA (from StockSymbol Collection):
   ‚Ä¢ Current Market Price: ${this.formatCurrency(stockData.currentPrice)}
   ‚Ä¢ Today Opening Price: ${this.formatCurrency(stockData.todayOpeningPrice || 'N/A')}
   ‚Ä¢ Today Closing Price: ${this.formatCurrency(stockData.todayClosingPrice || 'N/A')}
   ‚Ä¢ Previous Close: ${this.formatCurrency(stockData.previousClose || 'N/A')}
   ‚Ä¢ 52 Week High: ${this.formatCurrency(stockData.weekHigh52 || 'N/A')}
   ‚Ä¢ 52 Week Low: ${this.formatCurrency(stockData.weekLow52 || 'N/A')}

üîÑ TRANSACTION DETAILS:
   ‚Ä¢ Action Type: ${action}
   ‚Ä¢ Sell Price (Market): ${this.formatCurrency(transactionData.sellPrice)}
   ‚Ä¢ Quantity to Sell: ${transactionData.quantity}
   ‚Ä¢ Total Sale Value: ${this.formatCurrency(transactionData.totalSaleValue)}
   ‚Ä¢ Transaction Fee: ${this.formatCurrency(transactionData.transactionFee || 0)}
   ‚Ä¢ Net Amount Received: ${this.formatCurrency(transactionData.netAmount)}

üìã BEFORE TRANSACTION STATE:
   Portfolio Level:
   ‚Ä¢ Total Value: ${this.formatCurrency(portfolioBefore.totalValue)}
   ‚Ä¢ Cash Balance: ${this.formatCurrency(portfolioBefore.cashBalance)}
   ‚Ä¢ Total Investment: ${this.formatCurrency(portfolioBefore.totalInvestment)}
   ‚Ä¢ Holdings Count: ${portfolioBefore.holdingsCount}
   
   Stock Level (${stockSymbol}):
   ‚Ä¢ Held Quantity: ${beforeState.quantity}
   ‚Ä¢ Buy Price (Weighted Avg): ${this.formatCurrency(beforeState.buyPrice)}
   ‚Ä¢ Total Investment Value: ${this.formatCurrency(beforeState.investmentValueAtBuy)}
   ‚Ä¢ Current Market Value: ${this.formatCurrency(beforeState.investmentValueAtMarket)}
   ‚Ä¢ Weight: ${this.formatPercentage(beforeState.weight)}
   ‚Ä¢ Unrealized P&L: ${this.formatCurrency(beforeState.unrealizedPnL)} (${this.formatPercentage(beforeState.unrealizedPnLPercent)})

üîÑ SELL CALCULATION PROCESS:
   Step 1 - Quantity Validation:
   ‚Ä¢ Available Quantity: ${beforeState.quantity}
   ‚Ä¢ Requested Sell Quantity: ${transactionData.quantity}
   ‚Ä¢ Validation: ${transactionData.quantity <= beforeState.quantity ? '‚úÖ Valid' : '‚ùå Insufficient'}
   
   Step 2 - Sale Value Calculation:
   ‚Ä¢ Market Price: ${this.formatCurrency(stockData.currentPrice)}
   ‚Ä¢ Sell Quantity: ${transactionData.quantity}
   ‚Ä¢ Gross Sale Value: ${transactionData.quantity} √ó ${this.formatCurrency(stockData.currentPrice)} = ${this.formatCurrency(transactionData.totalSaleValue)}
   
   Step 3 - P&L Calculation:
   ‚Ä¢ Original Investment (for sold quantity): ${this.formatCurrency(sellCalculation.originalInvestment)}
   ‚Ä¢ Sale Value: ${this.formatCurrency(transactionData.totalSaleValue)}
   ‚Ä¢ Realized P&L: ${this.formatCurrency(sellCalculation.realizedPnL)}
   ‚Ä¢ P&L Percentage: ${this.formatPercentage(sellCalculation.realizedPnLPercent)}
   
   Step 4 - Remaining Position Calculation:
   ‚Ä¢ Remaining Quantity: ${beforeState.quantity} - ${transactionData.quantity} = ${beforeState.quantity - transactionData.quantity}
   ${action !== 'Sell' ? `‚Ä¢ Remaining Investment Value: ${this.formatCurrency(sellCalculation.remainingInvestment)}
   ‚Ä¢ Remaining Market Value: ${this.formatCurrency(sellCalculation.remainingMarketValue)}` : '‚Ä¢ Position: COMPLETELY SOLD'}
   
   Step 5 - Cash Balance Update:
   ‚Ä¢ Previous Cash: ${this.formatCurrency(portfolioBefore.cashBalance)}
   ‚Ä¢ Amount Received: ${this.formatCurrency(transactionData.netAmount)}
   ‚Ä¢ New Cash Balance: ${this.formatCurrency(portfolioBefore.cashBalance + transactionData.netAmount)}

‚úÖ AFTER TRANSACTION STATE:
   Portfolio Level:
   ‚Ä¢ Total Value: ${this.formatCurrency(portfolioAfter.totalValue)}
   ‚Ä¢ Cash Balance: ${this.formatCurrency(portfolioAfter.cashBalance)}
   ‚Ä¢ Total Investment: ${this.formatCurrency(portfolioAfter.totalInvestment)}
   ‚Ä¢ Holdings Count: ${portfolioAfter.holdingsCount}
   ‚Ä¢ Value Change: ${this.formatCurrency(portfolioAfter.totalValue - portfolioBefore.totalValue)}
   
   Stock Level (${stockSymbol}):
   ${afterState ? `
   ‚Ä¢ Final Quantity: ${afterState.quantity}
   ‚Ä¢ Buy Price (Weighted Avg): ${this.formatCurrency(afterState.buyPrice)}
   ‚Ä¢ Total Investment Value: ${this.formatCurrency(afterState.investmentValueAtBuy)}
   ‚Ä¢ Current Market Value: ${this.formatCurrency(afterState.investmentValueAtMarket)}
   ‚Ä¢ Current Weight: ${this.formatPercentage(afterState.weight)}
   ‚Ä¢ Unrealized P&L: ${this.formatCurrency(afterState.unrealizedPnL)} (${this.formatPercentage(afterState.unrealizedPnLPercent)})
   ‚Ä¢ Status: ${afterState.status}` : `
   ‚Ä¢ Position Status: COMPLETELY SOLD
   ‚Ä¢ Final Sale Date: ${new Date().toLocaleDateString('en-IN')}
   ‚Ä¢ Final Sale Price: ${this.formatCurrency(stockData.currentPrice)}`}

üí∞ FINANCIAL SUMMARY:
   ‚Ä¢ Gross Sale Amount: ${this.formatCurrency(transactionData.totalSaleValue)}
   ‚Ä¢ Net Amount Received: ${this.formatCurrency(transactionData.netAmount)}
   ‚Ä¢ Realized P&L: ${this.formatCurrency(sellCalculation.realizedPnL)} (${this.formatPercentage(sellCalculation.realizedPnLPercent)})
   ‚Ä¢ Cash Balance Change: +${this.formatCurrency(transactionData.netAmount)}
   ‚Ä¢ Transaction Result: ${sellCalculation.realizedPnL >= 0 ? '‚úÖ Profit' : '‚ùå Loss'}

${'='.repeat(80)}

`;

    try {
      await fs.appendFile(this.logFilePath, logEntry);
    } catch (error) {
      console.error('Failed to write sell transaction log:', error);
    }
  }

  async logPortfolioSnapshot(portfolioData, reason = 'Portfolio Update') {
    await this.ensureLogFile();
    
    const logEntry = `
${'='.repeat(80)}
üìä PORTFOLIO SNAPSHOT - ${reason.toUpperCase()}
${'='.repeat(80)}
üìÖ Timestamp: ${this.getCurrentTimestamp()}
üìä Portfolio: ${portfolioData.name} (ID: ${portfolioData._id})

üíº PORTFOLIO OVERVIEW:
   ‚Ä¢ Total Value: ${this.formatCurrency(portfolioData.totalValue)}
   ‚Ä¢ Cash Balance: ${this.formatCurrency(portfolioData.cashBalance)}
   ‚Ä¢ Total Investment: ${this.formatCurrency(portfolioData.totalInvestment)}
   ‚Ä¢ Minimum Investment: ${this.formatCurrency(portfolioData.minInvestment)}
   ‚Ä¢ Holdings Count: ${portfolioData.holdings.length}
   ‚Ä¢ Overall P&L: ${this.formatCurrency(portfolioData.totalValue - portfolioData.minInvestment)}

üìà INDIVIDUAL HOLDINGS:
${portfolioData.holdings.map((holding, index) => `
   ${index + 1}. ${holding.symbol}:
      ‚Ä¢ Quantity: ${holding.quantity}
      ‚Ä¢ Buy Price: ${this.formatCurrency(holding.buyPrice)}
      ‚Ä¢ Current Price: ${this.formatCurrency(holding.currentPrice)}
      ‚Ä¢ Investment Value: ${this.formatCurrency(holding.investmentValueAtBuy)}
      ‚Ä¢ Market Value: ${this.formatCurrency(holding.investmentValueAtMarket)}
      ‚Ä¢ Weight: ${this.formatPercentage(holding.weight)}
      ‚Ä¢ Unrealized P&L: ${this.formatCurrency(holding.unrealizedPnL)} (${this.formatPercentage(holding.unrealizedPnLPercent)})
      ‚Ä¢ Status: ${holding.status}`).join('')}

${'='.repeat(80)}

`;

    try {
      await fs.appendFile(this.logFilePath, logEntry);
    } catch (error) {
      console.error('Failed to write portfolio snapshot log:', error);
    }
  }

  async logError(error, context = 'Unknown') {
    await this.ensureLogFile();
    
    const logEntry = `
${'='.repeat(80)}
‚ùå ERROR LOG
${'='.repeat(80)}
üìÖ Timestamp: ${this.getCurrentTimestamp()}
üî¥ Context: ${context}
üî¥ Error: ${error.message}
üî¥ Stack: ${error.stack}
${'='.repeat(80)}

`;

    try {
      await fs.appendFile(this.logFilePath, logEntry);
    } catch (writeError) {
      console.error('Failed to write error log:', writeError);
    }
  }
}

module.exports = new TransactionLogger();
