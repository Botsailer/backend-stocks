/**
 * Test all transaction types to verify cash balance calculations
 */

function testAllTransactions() {
  console.log('üß™ TESTING ALL TRANSACTION TYPES');
  console.log('=================================\n');

  // Initial state
  let cashBalance = 50000;
  let minInvestment = 100000;
  
  console.log('üìä INITIAL STATE:');
  console.log(`   Cash Balance: ‚Çπ${cashBalance}`);
  console.log(`   Min Investment: ‚Çπ${minInvestment}\n`);

  // 1. FRESH BUY
  console.log('1Ô∏è‚É£ FRESH BUY (ABC @ ‚Çπ100, qty: 50)');
  const buyPrice1 = 100;
  const qty1 = 50;
  const investment1 = buyPrice1 * qty1; // ‚Çπ5000
  cashBalance -= investment1;
  console.log(`   Cash Balance: ‚Çπ${cashBalance} (reduced by investment cost)`);
  console.log(`   Holdings: ABC - ${qty1} @ ‚Çπ${buyPrice1} = ‚Çπ${investment1}\n`);

  // 2. ADDON BUY (same stock)
  console.log('2Ô∏è‚É£ ADDON BUY (ABC @ ‚Çπ120, qty: 25)');
  const buyPrice2 = 120;
  const qty2 = 25;
  const investment2 = buyPrice2 * qty2; // ‚Çπ3000
  cashBalance -= investment2;
  const totalQty = qty1 + qty2; // 75
  const avgPrice = (investment1 + investment2) / totalQty; // ‚Çπ106.67
  console.log(`   Cash Balance: ‚Çπ${cashBalance} (reduced by additional investment)`);
  console.log(`   Holdings: ABC - ${totalQty} @ ‚Çπ${avgPrice.toFixed(2)} avg = ‚Çπ${investment1 + investment2}\n`);

  // 3. PARTIAL SELL
  console.log('3Ô∏è‚É£ PARTIAL SELL (ABC @ ‚Çπ130, qty: 25)');
  const sellPrice1 = 130;
  const sellQty1 = 25;
  const saleProceeds1 = sellPrice1 * sellQty1; // ‚Çπ3250
  const remainingQty = totalQty - sellQty1; // 50
  const realizedPnL1 = saleProceeds1 - (avgPrice * sellQty1); // ‚Çπ583.25
  cashBalance += saleProceeds1; // ONLY sale proceeds added
  console.log(`   Sale Proceeds: ‚Çπ${saleProceeds1} (${sellPrice1} √ó ${sellQty1})`);
  console.log(`   Realized P&L: ‚Çπ${realizedPnL1.toFixed(2)} (for tracking only)`);
  console.log(`   Cash Balance: ‚Çπ${cashBalance} (increased by sale proceeds only)`);
  console.log(`   Holdings: ABC - ${remainingQty} @ ‚Çπ${avgPrice.toFixed(2)} avg\n`);

  // 4. COMPLETE SELL
  console.log('4Ô∏è‚É£ COMPLETE SELL (ABC @ ‚Çπ140, qty: 50)');
  const sellPrice2 = 140;
  const sellQty2 = remainingQty;
  const saleProceeds2 = sellPrice2 * sellQty2; // ‚Çπ7000
  const realizedPnL2 = saleProceeds2 - (avgPrice * sellQty2); // ‚Çπ1666.5
  cashBalance += saleProceeds2; // ONLY sale proceeds added
  console.log(`   Sale Proceeds: ‚Çπ${saleProceeds2} (${sellPrice2} √ó ${sellQty2})`);
  console.log(`   Realized P&L: ‚Çπ${realizedPnL2.toFixed(2)} (for tracking only)`);
  console.log(`   Cash Balance: ‚Çπ${cashBalance} (increased by sale proceeds only)`);
  console.log(`   Holdings: ABC - SOLD\n`);

  // 5. NEW STOCK BUY
  console.log('5Ô∏è‚É£ NEW STOCK BUY (XYZ @ ‚Çπ200, qty: 30)');
  const buyPrice3 = 200;
  const qty3 = 30;
  const investment3 = buyPrice3 * qty3; // ‚Çπ6000
  cashBalance -= investment3;
  console.log(`   Cash Balance: ‚Çπ${cashBalance} (reduced by investment cost)`);
  console.log(`   Holdings: XYZ - ${qty3} @ ‚Çπ${buyPrice3} = ‚Çπ${investment3}\n`);

  // VERIFICATION
  console.log('‚úÖ VERIFICATION:');
  const totalRealizedPnL = realizedPnL1 + realizedPnL2;
  const totalInvested = investment3; // Only XYZ remaining
  const expectedCash = minInvestment - totalInvested + totalRealizedPnL;
  
  console.log(`   Total Realized P&L: ‚Çπ${totalRealizedPnL.toFixed(2)}`);
  console.log(`   Current Holdings Value: ‚Çπ${totalInvested}`);
  console.log(`   Expected Cash: ‚Çπ${minInvestment} - ‚Çπ${totalInvested} + ‚Çπ${totalRealizedPnL.toFixed(2)} = ‚Çπ${expectedCash.toFixed(2)}`);
  console.log(`   Actual Cash: ‚Çπ${cashBalance}`);
  console.log(`   Match: ${Math.abs(expectedCash - cashBalance) < 0.01 ? '‚úÖ YES' : '‚ùå NO'}\n`);

  console.log('üîë KEY PRINCIPLES:');
  console.log('   ‚Ä¢ BUY: Cash -= (buyPrice √ó quantity)');
  console.log('   ‚Ä¢ SELL: Cash += (currentPrice √ó quantity)');
  console.log('   ‚Ä¢ P&L: Tracked separately, not added to cash');
  console.log('   ‚Ä¢ minimumInvestmentValueStock: Only updated for active holdings');
}

testAllTransactions();